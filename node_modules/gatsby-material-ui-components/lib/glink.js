"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GatsbyLink = void 0;
var react_1 = __importDefault(require("react"));
var gatsby_1 = require("gatsby");
var ALink = function (_a) {
    var href = _a.href, children = _a.children, innerRef = _a.innerRef, other = __rest(_a, ["href", "children", "innerRef"]);
    return (react_1.default.createElement("a", __assign({ href: href, ref: innerRef }, other), children));
};
exports.GatsbyLink = react_1.default.forwardRef(function (props, ref) {
    var to = props.to, activeClassName = props.activeClassName, partiallyActive = props.partiallyActive, other = __rest(props, ["to", "activeClassName", "partiallyActive"]);
    var internal = /^\/(?!\/)/.test(to);
    // Use Gatsby Link for internal links, and <a> for others
    if (internal) {
        var file = /\.[0-9a-z]+$/i.test(to);
        if (file) {
            return react_1.default.createElement(ALink, __assign({ href: to, innerRef: ref }, other));
        }
        return (react_1.default.createElement(gatsby_1.Link, __assign({ to: to, activeClassName: activeClassName, partiallyActive: partiallyActive, innerRef: ref }, other)));
    }
    return react_1.default.createElement(ALink, __assign({ href: to, innerRef: ref }, other));
});
exports.GatsbyLink.displayName = 'Link';
//# sourceMappingURL=glink.js.map